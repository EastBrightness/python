# 변수 : 데이터를 저장하는 기술
# 함수 : 코드를 묶는 기술
# 클래스 : 변수와 함수를 묶는 기술

# 클래스 기반 프로그래밍을 == 객체지향기법 이라고 함.
# 클래스라는 건 왜 만들었나? 초보자한테 일을 시키려고.
# 함수를 만들 능력이 없는 초보 개발자한테 기능을 제공해주는 게 목적. (단, 코드 교육은 안하고.)

def AbsSum(n1, n2):
    if n1 < 0:
        n1 = n1 * -1
    abs(n2)
    result = n1 + n2
    return result

# 초보 개발자는 변수를 만들어야하고,
# 함수를 적절히 사용해야하고
# print까지 시켜줘야한다는 것조차 못하는 사람에게,
result1 = AbsSum(-1, 3)
print(result1)

# ===============
# 함수는 def, 클래스는 class 라고 적어두고 시작.
class 회사프로그램:
    n1 = 0  # 멤버변수 : 클래스 안에 있는 변수.
    n2 = 0  
    # 메서드 : 클래스 안의 함수( 특징: 매개변수 가장 앞에 self라는 매개변수를 만들어놓아야함. )
    def AbsSum(self, n1, n2):   # self : 메서드 고정 매개변수로 사용할 땐 채워놓지 않음(사용 X)
        result = 0 # 지역변수 : 함수 안에 있는 변수
        if n1 < 0:
            n1 = n1 * -1
        self.n1 = n1    # self.n1 : 매개변수의 n1
        self.n2 = n2    # n2 : 지역변수의 n2
        # 즉, 지역변수로 없어질 친구를 self 를 통해 멤버변수로 백업을 시켜놓겠단 이야기임.
        abs(n2)
        result = n1 + n2
        return result

    def Last(self):     # 사실상 매개변수가 없는 메서드임. (self) 는 함수가 아니라 메서드라는 표시 정도
        print(self.n1 + self.n2)

# 그냥 프로그램 모르는 사람도 편하게 사용할 수 있도록 만드려는 의도로 만든게 클래스임.
# 객체화 : 클래스를 변수로 만든다
# 1. 클래스를 변수로 만든다
s = 회사프로그램()
# 2. AbsSum을 사용한다. 숫자 2개를 () 안에 적을 것. s에는 변수명을 적을 것.
s.AbsSum(3, 5)       
# 3. Last를 사용한다.
s.Last()

# class : 변수와 함수를 묶는 기술 ( 세트 제품 )

# 기원은 이랬었는데.. 다른 소프트웨어 가져와서 쓸 수 있기 때문에, 많이 쓰임.
